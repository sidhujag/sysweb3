import { Version } from 'eth-sig-util';

// import { ITxid } from '@pollum-io/sysweb3-utils'; // Unused import

import type LedgerHwAppEth from '@ledgerhq/hw-app-eth';

export type GetPublicKeyParams = { hdPath: string };
export type GetPublicKeyResponse = Awaited<
  ReturnType<LedgerHwAppEth['getAddress']>
> & {
  chainCode: string;
};

export type LedgerSignTransactionParams = { hdPath: string; tx: string };
export type LedgerSignTransactionResponse = Awaited<
  ReturnType<LedgerHwAppEth['signTransaction']>
>;

export type LedgerSignMessageParams = { hdPath: string; message: string };
export type LedgerSignMessageResponse = Awaited<
  ReturnType<LedgerHwAppEth['signPersonalMessage']>
>;

export type LedgerSignTypedDataParams = {
  domainSeparatorHex: string;
  hashStructMessageHex: string;
  hdPath: string;
};
export type LedgerSignTypedDataResponse = Awaited<
  ReturnType<LedgerHwAppEth['signEIP712HashedMessage']>
>;

// eslint-disable-next-line @typescript-eslint/consistent-type-definitions
export interface LedgerBridge {
  attemptMakeApp(): Promise<boolean>;

  destroy(): Promise<void>;

  deviceSignMessage(
    params: LedgerSignMessageParams
  ): Promise<LedgerSignMessageResponse>;

  deviceSignTransaction(
    params: LedgerSignTransactionParams
  ): Promise<LedgerSignTransactionResponse>;

  deviceSignTypedData(
    params: LedgerSignTypedDataParams
  ): Promise<LedgerSignTypedDataResponse>;

  getPublicKey(params: GetPublicKeyParams): Promise<GetPublicKeyResponse>;

  init(bridgeUrl: string): Promise<void>;

  isDeviceConnected: boolean;

  updateTransportMethod(transportType: string): Promise<boolean>;
}

export interface BlockbookUTXO {
  address: string;
  confirmations: number;
  height: number;
  path: string;
  txid: string;
  value: string;
  vout: number;
}

// Generated by https://quicktype.io

export interface BlockbookTransaction {
  blockHash: string;
  blockHeight: number;
  blockTime: number;
  confirmations: number;
  fees: string;
  hex: string;
  txid: string;
  value: string;
  valueIn: string;
  version: number;
  vin: Vin[];
  vout: Vout[];
}

export interface Vin {
  addresses: string[];
  isAddress: boolean;
  n: number;
  sequence: number;
  txid: string;
  value: string;
}
export type UTXOPayload = {
  utxos: BlockbookUTXO[];
};
export interface Vout {
  addresses: string[];
  hex: string;
  isAddress: boolean;
  n: number;
  value: string;
}

export interface IUTXOMethods {
  getUtxoAddress: ({
    coin,
    index,
    slip44,
  }: {
    coin: string;
    index: number;
    slip44: number;
  }) => Promise<string>;
  getUtxos: ({
    accountIndex,
    currency,
    slip44,
  }: {
    accountIndex: number;
    currency: string;
    slip44: number;
  }) => Promise<BlockbookUTXO[]>;
  getXpub: ({
    index,
    coin,
    slip44,
    withDescriptor,
  }: {
    coin: string;
    index: number;
    slip44: number;
    withDescriptor?: boolean | undefined;
  }) => Promise<string>;
  verifyUtxoAddress: (
    accountIndex: number,
    currency: string,
    slip44: number
  ) => Promise<string>;
}

interface MessageTypeProperty {
  name: string;
  type: string;
}
export interface MessageTypes {
  [additionalProperties: string]: MessageTypeProperty[];
  EIP712Domain: MessageTypeProperty[];
}

export interface IEvmMethods {
  getEvmAddressAndPubKey: ({
    accountIndex,
  }: {
    accountIndex: number;
  }) => Promise<{
    address: string;
    publicKey: string;
  }>;
  signEVMTransaction: ({
    rawTx,
    accountIndex,
  }: {
    accountIndex: number;
    rawTx: string;
  }) => Promise<{
    r: string;
    s: string;
    v: string;
  }>;
  signPersonalMessage: ({
    message,
    accountIndex,
  }: {
    accountIndex: number;
    message: string;
  }) => Promise<string>;
  signTypedData: ({
    version,
    data,
    accountIndex,
  }: {
    accountIndex: number;
    data: any;
    version: Version;
  }) => Promise<string>;
}
